<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木木的小屋</title>
  
  <subtitle>活在当下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-27T17:09:36.808Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杜文丽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>木木的日常9.28</title>
    <link href="http://yoursite.com/2018/09/28/%E6%9C%A8%E6%9C%A8%E7%9A%84%E6%97%A5%E5%B8%B89-28/"/>
    <id>http://yoursite.com/2018/09/28/木木的日常9-28/</id>
    <published>2018-09-27T16:27:44.000Z</published>
    <updated>2018-09-27T17:09:36.808Z</updated>
    
    <content type="html"><![CDATA[<p>九月过得真快啊~ 一转眼就过去了，其实，大学也过得蛮快的，现在就想着，大三大四，研究生的生活了。</p><p>今天纪念一下，leetcode半百（国庆准备破百），也总算是完成了众多安排中的一个（难得完成，难得难得）本来这个博客是想打造成技术博客的，但是，想想还是算了，还是走欣欣的路线吧，哈哈！</p><p><img src="a.png" alt=""></p><p>从大二下开始情绪就不稳定，原因我就不想说了，不开心的事情我会很快忘记哒！一路走来，发现一直陪在身边的挚友，是咪小哥，她一直都在，从大一，到大二，到大三，到现在，而且，我相信，会永远永远走下去。好幸运，自己有这么一个可以倾诉，可以相信，可以依靠的人，闺蜜这个词都难以形容我对咪小哥的感情，大概就是，相互依靠，相互扶持吧。她见证了我所有的样子，好的，不好的，所有的所有！就像是亲人一样！</p><p>最近比较厌学，所谓的厌学，是指，不想听课，觉得吧，是浪费时间。我知道这样想不好，但是貌似这就是事实啊。最近觉得编译原理挺好玩的，现在最想上的课程大概就是编译原理还有系统级编程吧~嘿嘿。</p><p>一直到大三，我才开始思考，我今后的路要怎么走，曾一度埋在心里的种子，最近复苏了，涨势很猛，想做的事，想成为的人，我一定会从心而行的，我现在，知道我想要什么，终于不是没有梦想的咸鱼了。</p><p>原来寝室的小妹，一直和我关系很好，我们之间的交流，常常都是触及灵魂的，三观很合的吧，她就像林黛玉，很惹人怜爱，但是，看惯了世间姿态，也渐渐变得没有什么欲求，就像，大二时候的我一样，无欲无求。小妹有抑郁，各种原因吧，很长一段时间了，她不爱社交，喜欢画画，喜欢服装设计，她的妈妈活的更像一个公主，倾其书画样样精通的那种，在这样的环境熏陶下，小妹有种很特别的古典气质。小妹喜欢摄影，上学期就给我拍过，以前真不觉得自己好看，也不会打扮，不会化妆，什么都不会。和她待在一起的时候，她总是会夸我，你怎么这么好看，那些虚情假意的赞美是能感受得到的，但，和她待在一起的时候，我深刻的感受到，她是发自内心的。她的真诚让我感到很舒服，前几天也就是中秋的时候，画了个淡妆，带了美瞳（只会最简单的，其他的都不会），穿上JK制服，拍了一组很出戏的照片，小妹拍完就非常激动了，直接蹲在地上，惊讶地捂嘴。这也是她，也是我，合作的最成功的一次吧！她说，这就是初恋的感觉。这些照片，应该会存一辈子吧~ 那天，心情特比好！</p><p><img src="a.jpg" alt=""></p><p><img src="b.jpg" alt=""></p><p><img src="c.jpg" alt=""></p><p><img src="d.jpg" alt=""></p><p><img src="e.jpg" alt=""></p><p><img src="f.jpg" alt=""></p><p>下面的是上学期拍的了，当时小妹就告诉我，JK制服很适合我，然后就买了，特地约拍的呢，哈哈哈</p><p><img src="2.jpg" alt=""></p><p><img src="3.jpg" alt=""></p><p><img src="4.jpg" alt=""></p><p><img src="5.jpg" alt=""></p><p><img src="6.jpg" alt=""></p><p>大三，其实心态变化挺大的，但我非常喜欢现在的自己，以前不知道要对自己好，要关心和爱护自己，栽了跟头才明白，不过，现在已经改好啦，会好好爱自己，爱生活，爱家人，爱学习的呐，哦对了，还要好好爱咪哥！所有一路陪我走过来的人，我都会铭记在心的，这也就是大学的美妙所在吧！</p><p>对于那些骗吃骗喝，功利心极强的人，我还是敬而远之，我知道不是一类人，相处起来会很累，所以为了让自己好受一点，我不会委屈自己和他们为伍的。有时候他们真的会恶心到我，不过，还行吧，见惯不惊就好了，世界之大，无奇不有，更何况我看到的还只是冰山一角。</p><p>最近很沉迷算法，噗，其实，没啥不好。现在我又不追星（曾经一度为了让自己沉迷居老师的颜而硬撑着把镇魂看完orz还不是没用，对居老师一点感觉都没有）也不沉迷游戏，也不沉迷电视剧orz，可以说是真的无欲无求了，居然还对算法有感觉，我也是对自己非常服气了，可能是，那种对数学的感觉转移到了算法上了吧，以前总是很害怕做算法题，因为不会做，那种优越感还有害怕失败的感觉一再让我退缩，现在好了，是铁了心要往前冲了，嘿嘿，感觉还不错，更何况，有那么多人和我一起冲的呐！Google出的TensorFlow还没有玩转，表示不服气，很气气，哼，我一定会搞定的，再给我点时间的啦<del>~</del>~~  好嘛好嘛，给你给你，想要我都给你~~~</p><p>对于未来，现在没有不安，甚至，有点小期待，哈哈哈。太喜欢自己了，每天都和自己谈恋爱，噗，让我自恋一会儿，哈哈哈！再去刷两道算法再睡，晚安安~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;九月过得真快啊~ 一转眼就过去了，其实，大学也过得蛮快的，现在就想着，大三大四，研究生的生活了。&lt;/p&gt;
&lt;p&gt;今天纪念一下，leetcode半百（国庆准备破百），也总算是完成了众多安排中的一个（难得完成，难得难得）本来这个博客是想打造成技术博客的，但是，想想还是算了，还是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开学第三周小感</title>
    <link href="http://yoursite.com/2018/09/18/%E5%BC%80%E5%AD%A6%E7%AC%AC%E4%B8%89%E5%91%A8%E5%B0%8F%E6%84%9F/"/>
    <id>http://yoursite.com/2018/09/18/开学第三周小感/</id>
    <published>2018-09-18T05:02:04.000Z</published>
    <updated>2018-09-18T07:10:45.381Z</updated>
    
    <content type="html"><![CDATA[<p>这学期大三了，也是最近才刚刚意识过来，原来大学只有三年，在第三年结束的时候，一切都已经见分晓了。</p><p>最近也咨询了不少学长学姐的想法和打算，有的人特别有想法，他突破了惯例的思维方式，放弃了以前特别在乎的成绩，我承认，现在得到的高分确实太容易了，实际上很多东西我确实没有学懂，我只是把考试要考的东西全部都过了一遍，然后就可以比较轻松地应对考试了。我内心很自责，但我发现自己自学能力太差了，自己看英文的课本看了下一句就忘记了上一句在讲什么，很没有效率，也很浪费时间。比如今天上午，我本来打算好好看一下计网，翻着老师的PPT，过了一遍，发现做题还是不会，最后是直接百度找的答案，看了答案才知道这道题应该这样做。orz，这种应付了事根本就不是我想要的好吗？我还是去coursea找网课来听听好了！</p><p>搞了一次建模，也是第一次熬了通宵，那种眩晕的感觉至今都还在我的脑海。但也是这种从未有过的经历，让我明白，原来有好多人比我聪明，还比我努力，建模结果和题意不符合的时候，队友就一直在找问题出在哪里了，一直在思考，而我自己却放弃思考，直接去调程序，把它调成满足最后结果的样子，呸，这样的自己真丑陋，orz我以后再也不要干这种事情了！</p><p>刚刚跟椠姐打了电话，原来读研究生真的很不容易，刚刚到新实验室的她还需要适应新环境，由于专业的不对口，还需要从0开始学习很多课程，第一周，她就天天哭，给她妈倾诉，给男朋友倾诉，大家过的都不容易，不只是我一个人不容易，周围的貌似就没有过的容易的。</p><p>怎么说呢，挺想和媛姐多说说话的，但是老是去打扰她不好，而且我本来也没啥要紧的事情，只是想随便聊聊天而已，都是刚刚进入研究生的环境，媛姐也应该不容易的吧，只是她没有把最脆弱的一面展现给我，椠姐是全部都告诉我了。其实从来都没有感觉到姐妹之间可以这么亲，也是近几年，和椠姐的交流才比较多，以前交流真的不多，现在觉得椠姐很真实，在我崩溃的时候也安慰了我不少。她一直都是我的榜样呢！经历了高考的失利，复读的压力，妈妈突然来的病重，她确实很励志！有时候觉得自己过得太顺利了，有时候会特别心疼她，椠姐23岁了，她在这个年龄阶段所承受的苦，我一个都没有受过，我真希望，她以后能够轻轻松松，快快乐乐地活着。</p><p>一直很崇拜的学长，最近得知他因为英语而不能保研，确实挺遗憾的，也不知道他最后的打算是什么，这是别人的痛处，我不好再多问，但我一直相信，只要一直在努力，就会有无限的可能。今天早上听到的TED演讲，说的特别好，不要让五件事耽搁你的人生。1.过去的事情。2.别人的看法。其他的三点忘了，其实，所有的否定都是由对自己的不信任导致的，很佩服那些，自信的人，要相信我以前可是很自信的呐，这一年因为经历了一些事情，而打乱了我的生活轨迹，不过还行，没有到达那种不可挽回的地步。距离找工作的同学，还有三个多月的时间准备，对于我，还有九个月的时间准备。我该去哪里，我不知道，没有见过就没有渴求，真理！所以啊，就像学长说的那样，有机会多去北京看看，嗯，好！</p><p>还有九个月！挺住！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这学期大三了，也是最近才刚刚意识过来，原来大学只有三年，在第三年结束的时候，一切都已经见分晓了。&lt;/p&gt;
&lt;p&gt;最近也咨询了不少学长学姐的想法和打算，有的人特别有想法，他突破了惯例的思维方式，放弃了以前特别在乎的成绩，我承认，现在得到的高分确实太容易了，实际上很多东西我确实
      
    
    </summary>
    
    
      <category term="小感" scheme="http://yoursite.com/tags/%E5%B0%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>动态规划 leetcode 72题edit distance</title>
    <link href="http://yoursite.com/2018/09/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-leetcode-72%E9%A2%98edit-distance/"/>
    <id>http://yoursite.com/2018/09/12/动态规划-leetcode-72题edit-distance/</id>
    <published>2018-09-12T09:33:28.000Z</published>
    <updated>2018-09-12T16:11:06.766Z</updated>
    
    <content type="html"><![CDATA[<p>一直分不清楚动态规划和贪心，今天好好啃一啃</p><p>贪心：Ai –&gt; Ai+1</p><p>动归：A0,A1,A2….Ai –&gt;Ai+1 判断问题的子结构，具有最优子结构时，动归适用</p><p>嘤 贪心的复杂度明显低于动归</p><p>在最长子序列中（不一定连续），贪心思路</p><p>最开始，缓冲区里为空；</p><p>看到了字符“1”，添加到缓冲区的最后，即缓冲区中是“1”；</p><p>看到了字符“4”，“4”比缓冲区的所有字符都大，因此将“4”添加到缓冲区的最后，得到“14”；</p><p>看到了字符“6”，“6”比缓冲区的所有字符都大，因此将“6”添加到缓冲区的最后，得到“146”；</p><p>看到了字符“2”，“2”比“1”大，比“4”小，因此将“4”直接替换成“2”，得到“126”；</p><p>看到了字符“8”，“8”比缓冲区的所有字符都大，因此将“8”添加到缓冲区的最后，得到“1268”；</p><p>看到了字符“9”，“9”比缓冲区的所有字符都大，因此将“9”添加到缓冲区的最后，得到“12689”；</p><p>看到了字符“7”，“7”比“6”大，比“8”小，因此将“8”直接替换成“7”，得到“12679”；</p><p>现在，缓冲区的字符数目为5，因此，数组A的LIS的长度就是5！</p><p>这样，时间复杂度变为每次都在一个递增的序列中替换或插入一个新的元素，所以为O(nlogn)。、</p><p>提问！但这种做法只能得到长度，并不能得到子序列本身 </p><p>但是为什么是对的呢？在一个大佬的帮助下 理解了 大佬的解释是：相等的上升子序列，最后一个元素越小，越有利于之后使上升子序列的长度增加。 精辟！ 而且反正替换的也是比这个数大的最小的数，如果下一个数比这个数大，也只会替换后面的数字 前面的也没什么影响</p><p>动归思路：从第一位开始到最后一位，依次计算所有递增序列的长度，保存，最后来做比较</p><p>总之就是要 <strong>降低问题的规模</strong>！！！</p><p>问题重述：Given two words <em>word1</em> and <em>word2</em>, find the minimum number of steps required to convert <em>word1</em> to <em>word2</em>. (each operation is counted as 1 step.)</p><p>You have the following 3 operations permitted on a word:</p><p>a) Insert a character<br>b) Delete a character<br>c) Replace a character</p><p>思路：</p><p>打表存储 和DNA测序一样的思路</p><p>贴代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Solution35 &#123;</span><br><span class="line">public:</span><br><span class="line">    int minDistance(string word1, string word2) &#123;</span><br><span class="line">        int len1=word1.length();</span><br><span class="line">        int len2=word2.length();</span><br><span class="line">        int dis[len1+1][len2+1];</span><br><span class="line">        //初始化数据</span><br><span class="line">        for (int k = 0; k &lt;len1+1 ; ++k) &#123;</span><br><span class="line">            for (int i = 0; i &lt;len2+1 ; ++i) &#123;</span><br><span class="line">                dis[k][i]=INT;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt;len1+1 ; ++i) &#123;</span><br><span class="line">            dis[i][0]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int j = 0; j &lt;len2+1 ; ++j) &#123;</span><br><span class="line">            dis[0][j]=j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //进行运算</span><br><span class="line">        for (int l = 1; l &lt;len1+1 ; ++l) &#123;</span><br><span class="line">            for (int i = 1; i &lt;len2+1 ; ++i) &#123;</span><br><span class="line">                if(word1[l-1]==word2[i-1])&#123;</span><br><span class="line">                    dis[l][i]=dis[l-1][i-1];</span><br><span class="line">                &#125; else</span><br><span class="line">                    dis[l][i]=min(dis[l-1][i-1],min(dis[l-1][i],dis[l][i-1]))+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dis[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直分不清楚动态规划和贪心，今天好好啃一啃&lt;/p&gt;
&lt;p&gt;贪心：Ai –&amp;gt; Ai+1&lt;/p&gt;
&lt;p&gt;动归：A0,A1,A2….Ai –&amp;gt;Ai+1 判断问题的子结构，具有最优子结构时，动归适用&lt;/p&gt;
&lt;p&gt;嘤 贪心的复杂度明显低于动归&lt;/p&gt;
&lt;p&gt;在最长子序列
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP</title>
    <link href="http://yoursite.com/2018/09/05/TCP-IP/"/>
    <id>http://yoursite.com/2018/09/05/TCP-IP/</id>
    <published>2018-09-05T13:13:51.000Z</published>
    <updated>2018-09-06T00:11:56.433Z</updated>
    
    <content type="html"><![CDATA[<p><strong>链路层</strong>：网络接口层，包含设备的网络接口卡。</p><p><strong>网络层</strong>：处理分组在网络中的活动，分组的选路。</p><p>IP : 负责对数据加上IP地址，确定传输目标</p><p>ICMP,IGMP</p><p><strong>运输层</strong>：TCP:（传输控制协议）把  可靠传输机制   代码封装成接口函数API，即socket。用TCP port辨别所服务的application protocol</p><p>UDP：（用户数据报协议）什么鸟事都不干，只用来辨别application protocol的。把数据报的分组从一台主机发送到另一台主机。</p><p><strong>应用层</strong>：Telnet远程登录、FTP文件传输协议、SMTP简单邮件传送协议，SNMP简单网络管理协议</p><p>ISP：为端系统提供了一系列网络访问的类型</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;链路层&lt;/strong&gt;：网络接口层，包含设备的网络接口卡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络层&lt;/strong&gt;：处理分组在网络中的活动，分组的选路。&lt;/p&gt;
&lt;p&gt;IP : 负责对数据加上IP地址，确定传输目标&lt;/p&gt;
&lt;p&gt;ICMP,IGMP&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow图形生成、保存、查看</title>
    <link href="http://yoursite.com/2018/09/03/TensorFlow%E5%9B%BE%E5%BD%A2%E7%94%9F%E6%88%90%E3%80%81%E4%BF%9D%E5%AD%98%E3%80%81%E6%9F%A5%E7%9C%8B/"/>
    <id>http://yoursite.com/2018/09/03/TensorFlow图形生成、保存、查看/</id>
    <published>2018-09-03T02:44:21.000Z</published>
    <updated>2018-09-03T06:41:07.896Z</updated>
    
    <content type="html"><![CDATA[<p>首先定义保存路径</p><p>path = “./log”   #在项目中创建了一个叫log的文件夹</p><p>writer = tf.summary.FileWriter(path,sess.graph)</p><p>在当前项目文件夹下打开bash，运行代码  tensorboard –logdir=log</p><p>会在指定文件夹下生成如下文件</p><p><img src="a.png" alt=""></p><p>然后打开指定命令行下的网址就可以看到生成的图像。</p><p><img src="b.png" alt=""></p><p>简单代码参考：<a href="https://github.com/DuWenLi-mumu/tfPython/blob/master/tensorboard.py" target="_blank" rel="noopener">https://github.com/DuWenLi-mumu/tfPython/blob/master/tensorboard.py</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先定义保存路径&lt;/p&gt;
&lt;p&gt;path = “./log”   #在项目中创建了一个叫log的文件夹&lt;/p&gt;
&lt;p&gt;writer = tf.summary.FileWriter(path,sess.graph)&lt;/p&gt;
&lt;p&gt;在当前项目文件夹下打开bash，运行代码  t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习，神经网络基础 --持续更新中</title>
    <link href="http://yoursite.com/2018/08/30/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    <id>http://yoursite.com/2018/08/30/神经网络基础-持续更新中/</id>
    <published>2018-08-30T13:18:41.000Z</published>
    <updated>2018-09-03T09:52:23.274Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习术语：<a href="https://developers.google.com/machine-learning/crash-course/framing/ml-terminology" target="_blank" rel="noopener">https://developers.google.com/machine-learning/crash-course/framing/ml-terminology</a></p><p>卷积神经网络的介绍：<a href="https://developers.google.com/machine-learning/practica/image-classification/convolutional-neural-networks" target="_blank" rel="noopener">https://developers.google.com/machine-learning/practica/image-classification/convolutional-neural-networks</a></p><p><strong><em>卷积的定义包含两个参数</em></strong></p><ul><li><strong>Size of the tiles that are extracted</strong> (typically 3x3 or 5x5 pixels).</li><li><strong>The depth of the output feature map</strong>, which corresponds to the number of filters that are applied.</li></ul><p><img src="f.png" alt=""></p><p><img src="g.png" alt=""></p><p>1.卷积的特征提取。</p><p>2.ReLU</p><p>3.Pooling</p><p>4.Fully Connected Layers</p><p><img src="h.png" alt=""></p><p>CNN: 卷积输入向量 通过卷积核进行一定的运算（也叫做滤波器）进行输入的特征提取。</p><p>池化层：不影响质量的前提下进行压缩，减少参数，有maxPooling,AveragePooling。</p><p>Zero Padding补零操作使输出尺寸不变。</p><p>做完池化层之后，数据拍平Flatten层，然后放到全连接层，方便交给分类器进行分类。。。</p><p>全连接层：高度提纯特征，把图像变成一个向量，例如最后一层池化之后，输出的图像是20个12x12，通过有100个20x12x12的卷积核的全连接层变成了1x100的向量，</p><p>平方损失（L2）损失</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">= the square of the difference between the label and the prediction</span><br><span class="line">= (observation - prediction(x))2</span><br><span class="line">= (y - y&apos;)2</span><br></pre></td></tr></table></figure><p><strong>均方误差</strong> (<strong>MSE</strong>) 指的是每个样本的平均平方损失。要计算 MSE，请求出各个样本的所有平方损失之和，然后除以样本数量：</p><p><img src="a.png" alt=""></p><p>其中</p><ul><li>x 指的是模型进行预测时使用的特征集（例如，温度、年龄和交配成功率）。</li><li><p>y 指的是样本的标签（例如，每分钟的鸣叫次数）。</p></li><li><p>prediction(x) 指的是权重和偏差与特征集 x 结合的函数。</p></li><li>D 指的是包含多个有标签样本（即 (x,y)）的数据集。</li><li>N 指的是 D 中的样本数量</li></ul><p>epoch：一个epoch指代所有的数据送入网络中完成一次前向计算及反向传播的过程</p><p>batch size ：所谓Batch就是每次送入网络中训练的一部分数据，而Batch Size就是每个batch中训练样本的数量</p><p>shuffle（洗牌）: 在做机器学习的任务时，需要在运行模型之前将特征转化成词id再转化成模型可识别的二进制文件形式，其中转化成的词id文件最好进行shuffle，打乱各行数据，这样参数能不易陷入局部最优，模型能够更容易达到收敛。</p><p>正则化：避免过拟合，wccccc好吧 吴恩达老师讲过，我又忘记了，嘤嘤嘤。在保持有所有特征的前提下，减少特征的权重，也就是λ。嘿嘿，在特征多的时候效果很好哦。</p><p>引入惩罚项。下面的min是需要优化的误差值</p><p><img src="b.jpg" alt=""></p><p><img src="c.jpg" alt=""></p><p><img src="b.png" alt=""></p><p><img src="c.jpg" alt=""></p><p><img src="d,jpg" alt=""></p><p><strong>正则化项</strong>（complexity），用于衡量模型复杂度</p><p>λ是正则化率。λ越大，权值越小，易出现欠拟合。λ越小，权值越大，易出现过拟合</p><p>嘤嘤嘤，我终于懂了，妈妈的，嘤嘤嘤</p><p>这篇博客的正则化讲的很详细了<a href="https://www.cnblogs.com/jianxinzhou/p/4083921.html" target="_blank" rel="noopener">https://www.cnblogs.com/jianxinzhou/p/4083921.html</a></p><p>妈的，老是记不住线性回归和逻辑回归</p><p>在此重申：</p><p>线性回归：按照权重和结点值加起来 连续，预测</p><p>逻辑回归：在线性回归基础上加了sigmod函数 分类问题，不连续</p><p><strong>范数</strong></p><p> L0范数是指向量中非0的元素的个数</p><p> L1范数是指向量中各个元素绝对值之和，也有个美称叫“稀疏规则算子”（Lasso regularization）。L1范数是L0范数的最优凸近似</p><p> L2范数是指向量各元素的平方和然后求平方根。我们让L2范数的规则项||W||2最小，可以使得W的每个元素都很小，都接近于0，但与L1范数不同，它不会让它等于0，而是接近于0，这里是有很大的区别的哦。而越小的参数说明模型越简单，越简单的模型则越不容易产生过拟合现象</p><p><strong>稀疏矩阵，稠密矩阵</strong>：在矩阵中，如果数值为0的元素数目远远多于非0元素的数目，并且非0元素分布无规律时，则称该矩阵为稀疏矩阵；与之相反，若非0元素数目占大多数时，则称该矩阵为稠密矩阵。</p><p><strong>“神经网络”的所有标准组件：</strong></p><ul><li>一组节点，类似于神经元，位于层中。</li><li>一组权重，表示每个神经网络层与其下方的层之间的关系。下方的层可能是另一个神经网络层，也可能是其他类型的层。</li><li>一组偏差，每个节点一个偏差。</li><li>一个激活函数，对层中每个节点的输出进行转换。不同的层可能拥有不同的激活函数。</li></ul><p>训练神经网络的最佳做法</p><p><a href="https://developers.google.com/machine-learning/crash-course/training-neural-networks/best-practices" target="_blank" rel="noopener">https://developers.google.com/machine-learning/crash-course/training-neural-networks/best-practices</a></p><p>卷积神经网络的理解</p><p><img src="d.jpg" alt=""></p><p>channel：厚度</p><p>下图是3 channel的</p><p><img src="i.png" alt=""></p><p>卷积核中的27个数字与分别与样本对应相乘后，再进行求和，得到第一个结果。依次进行，最终得到 4×4.由于只有一个卷积核，所以最终得到的结果为 4×4×1。</p><p>channel分类</p><ol><li>最初输入的图片样本的 <code>channels</code> ，取决于图片类型，比如RGB；</li><li>卷积操作完成后输出的 <code>out_channels</code> ，取决于卷积核的数量。此时的 <code>out_channels</code> 也会作为下一次卷积时的卷积核的 <code>in_channels</code>；</li><li>卷积核中的 <code>in_channels</code> ，刚刚2中已经说了，就是上一次卷积的 <code>out_channels</code> ，如果是第一次做卷积，就是1中样本图片的 <code>channels</code> 。</li></ol><p>filter：卷积核的数量</p><p>下图是两个filter</p><p><img src="j.png" alt=""></p><p>one_hot独热码，编码形式。encodeing<br>0,1,2,3,4,5,6,7,8,9 十位数字 用一种独特的形式表示<br>0:1000000000   1:0100000000  2:0010000000  以此类推</p><p>交叉熵：cross_entropy：另一种计算误差的方法，比二次代价函数<img src="k.png" alt="">计算误差要好。误差表达式：<img src="l.png" alt="">!,对w求偏导得到表达式<img src="m.jpg" alt="">误差越大，梯度就越大，参数w调整得越快，训练速度也就越快</p><p>adam优化器：原博客解释 <a href="https://www.cnblogs.com/xinchrome/p/4964930.html" target="_blank" rel="noopener">https://www.cnblogs.com/xinchrome/p/4964930.html</a> （讲的还行，勉强理解了）Adam 这个名字来源于 adaptive moment estimation，自适应矩估计。概率论中矩的含义是：如果一个随机变量 X 服从某个分布，X 的一阶矩是 E(X)，也就是样本平均值，X 的二阶矩就是 E(X^2)，也就是样本平方的平均值。</p><p>Adam 算法根据损失函数对每个参数的梯度的一阶矩估计和二阶矩估计动态调整针对于每个参数的学习速率。Adam 也是基于梯度下降的方法，但是每次迭代参数的学习步长都有一个确定的范围，不会因为很大的梯度导致很大的学习步长，参数的值比较稳定。it does not require stationary objective, works with sparse gradients, naturally performs a form of step size annealing。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;机器学习术语：&lt;a href=&quot;https://developers.google.com/machine-learning/crash-course/framing/ml-terminology&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https:
      
    
    </summary>
    
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow解决overfitting</title>
    <link href="http://yoursite.com/2018/08/30/TensorFlow%E8%A7%A3%E5%86%B3overfitting/"/>
    <id>http://yoursite.com/2018/08/30/TensorFlow解决overfitting/</id>
    <published>2018-08-30T09:03:03.000Z</published>
    <updated>2018-08-30T09:28:01.781Z</updated>
    
    <content type="html"><![CDATA[<p>首先理解dropout</p><p>对于神经网络单元，按照一定比例的概率将其暂时从网络中丢弃。目的就是为了防止过拟合。</p><p>每次做完dropout，相当于从原始的网络中找到一个更瘦的网络。在每次训练的时候，让一半的特征检测器停止工作，提高网络的泛化能力。</p><p>在向前传导的时候，让某个神经元的激活值以一定的概率p让其停止工作</p><p><img src="a.png" alt=""></p><p>看了那么多，我好像只能看懂这些，等到以后看懂更多的时候再来补充吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先理解dropout&lt;/p&gt;
&lt;p&gt;对于神经网络单元，按照一定比例的概率将其暂时从网络中丢弃。目的就是为了防止过拟合。&lt;/p&gt;
&lt;p&gt;每次做完dropout，相当于从原始的网络中找到一个更瘦的网络。在每次训练的时候，让一半的特征检测器停止工作，提高网络的泛化能力。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 基础</title>
    <link href="http://yoursite.com/2018/08/30/TensorFlow-%E5%BC%A0%E9%87%8F%EF%BC%8C%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/08/30/TensorFlow-张量，变量/</id>
    <published>2018-08-30T07:11:17.000Z</published>
    <updated>2018-09-03T09:52:26.317Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>参考资料：</em></strong></p><p>原博客链接：<a href="https://www.jianshu.com/p/d9ab35b56ab8" target="_blank" rel="noopener">https://www.jianshu.com/p/d9ab35b56ab8</a></p><p>TensorFlow.js官网api <a href="https://js.tensorflow.org/api" target="_blank" rel="noopener">https://js.tensorflow.org/api</a></p><p>python的参考文档：<a href="https://www.tensorflow.org/api_docs/python/tf" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf</a></p><p>TensorFlow.js例子<a href="https://js.tensorflow.org/tutorials/fit-curve.html" target="_blank" rel="noopener">https://js.tensorflow.org/tutorials/fit-curve.html</a></p><p>TensorFlow各种激活函数：<a href="https://www.tensorflow.org/api_guides/python/nn" target="_blank" rel="noopener">https://www.tensorflow.org/api_guides/python/nn</a></p><p>TensorFlow的游乐场 <a href="http://playground.tensorflow.org" target="_blank" rel="noopener">http://playground.tensorflow.org</a></p><p>python绘图matplotlib  <a href="https://matplotlib.org" target="_blank" rel="noopener">https://matplotlib.org</a></p><p><strong><em>TensorFlow程序的流程</em></strong></p><p>1.定义算法的<strong>计算图（graph）</strong>结构</p><p>2.使用<strong>会话（session）</strong>执行计算</p><p>TensorFlow中图：节点（operation），边：Tensor</p><p>会话：（session）运行静态图的某一个部分，启动图的一部分</p><p><img src="e.png" alt=""></p><p><strong><em>基础知识：</em></strong></p><p>每个TF都有一个默认的图</p><p>张量：值不可变tf.tensor</p><p>0阶张量为标量</p><p>1阶张量为向量</p><p>2阶张量为矩阵</p><p>3阶张量为体积（暂且这样说吧）</p><p><img src="a.png" alt=""></p><p>变量 ：tf.Variable  用一个张量值来初始化的，可用assign方法给一个存在的变量分配一个新张量，值可变。用于模型训练时候，数据的保存和更新.变量通常贯穿于机器学习模型的整个生命周期中，在 TensorFlow.js 中，即使是在 tf.tidy 里创建，js也不会清理它们；但是，你可以手动调用 dispose。</p><p>有了变量必须还要使用tf.initialize_all_variables()来初始化变量。</p><p><img src="b.png" alt=""></p><p>操作：operations(ops) 操作张量，返回新张量，原张量值不变</p><p>有square，add，sub等，支持嵌套操作</p><p><code>tf.tidy</code> 执行后就会清除所有中间新建的 tensors 来达到释放 GPU 内存，但不会消除内部的返回值。</p><p>模型和层：一个函数及一个模型，给定相应输入得到期望输出</p><p>tf.mode是一个模型，可以是线性模型，有了模型以后就可以往里面添加层</p><p>tf.sequential 一层的输入是下一层的输出，拓扑排序是线性的栈</p><p><img src="c.png" alt=""></p><p>tf.layers.dense 全连接层，添加一个层，即初学的add_layer()函数</p><p>dense(<br>    inputs,<br>    units,<br>    activation=None,<br>    use_bias=True,<br>    kernel_initializer=None,<br>    bias_initializer=tf.zeros_initializer(),<br>    kernel_regularizer=None,<br>    bias_regularizer=None,<br>    activity_regularizer=None,<br>    trainable=True,<br>    name=None,<br>    reuse=None<br>)</p><p>inputs: 输入数据，2维tensor. </p><p>units: 该层的神经单元结点数。</p><p>inputshape：[1,2,3]的shape是(3,);一个二阶的张量[[1,2,3],[4,5,6]]的shape是(2,3);一个三阶的张量[[[1],[2],[3]],[[4],[5],[6]]]的shape是(2,3,1)  </p><p>activation: 激活函数.</p><p>use_bias: Boolean型，是否使用偏置项.  </p><p>kernel_initializer: 卷积核的初始化器. </p><p>bias_initializer: 偏置项的初始化器，默认初始化为0. </p><p>kernel_regularizer: 卷积核化的正则化，可选. </p><p>bias_regularizer: 偏置项的正则化，可选.  </p><p>activity_regularizer: 输出的正则化函数.  </p><p>trainable: Boolean型，表明该层的参数是否参与训练。如果为真则变量加入到图集合中 GraphKeys.TRAINABLE_VARIABLES (see tf.Variable).  </p><p>name: 层的名字. </p><p>reuse: Boolean型, 是否重复使用参数.</p><p>tf.Session相当于一个指针，指针指着什么，就能查看什么或者使哪一个运行起来。</p><p>tf.placeholder 占位符，输入变量暂存的地方。</p><p>tf.feed_dict 字典填充函数，使输入输出变得简单</p><p><img src="d.png" alt=""></p><p>cross_entropy 交叉熵，用来衡量人工神经网络ANN的预测值与实际值的一种方式。</p><p>交叉熵代价函数：<img src="e.jpg" alt=""></p><p><img src="f.jpg" alt=""></p><p><img src="g.jpg" alt=""></p><p>好吧没看懂，总之训练效果比二次代价函数要好。完毕！</p><p>as for training model, we need to do three things first</p><ul><li><p>A <em>loss function</em>, which measures how well a given polynomial fits the data. The lower the loss value, the better the polynomial fits the data.</p></li><li><p>An <em>optimizer</em>, which implements an algorithm for revising our coefficient values based on the output of the loss function. The optimizer’s goal is to minimize the output value of the loss function.</p></li><li><p>A <em>training loop</em>, which will iteratively run the optimizer to minimize loss.</p></li></ul><p>  minimize最神奇的地方，自动调整参数诶，哇哦</p><p><img src="C:\Users\18749\AppData\Local\Temp\1535707394705.png" alt="1535707394705"></p><p>TensorBoard读取并展示日志</p><p>tensorboard –logdir = 日志所在路径</p><p>搭建神经网络：</p><p>1.构建数据</p><p>2.构建模型</p><p>3.构建loss函数</p><p>4.构建优化器opt 一般用tf.train.GradientDescentOptimizer(learn rate)</p><p>5.train = opt.minimize(loss)</p><p>6.构建会话sess=tf.Session() 并初始化变量</p><p>7.每一次训练都需要减小化loss    sess.run(opt.minimize(loss))  此处的minimize很神奇，自动去调节权重和偏差。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;参考资料：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原博客链接：&lt;a href=&quot;https://www.jianshu.com/p/d9ab35b56ab8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.
      
    
    </summary>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>matlab 常用函数使用及示例</title>
    <link href="http://yoursite.com/2018/08/26/matlab-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%A4%BA%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/08/26/matlab-常用函数使用及示例/</id>
    <published>2018-08-26T10:42:55.000Z</published>
    <updated>2018-08-26T15:26:13.031Z</updated>
    
    <content type="html"><![CDATA[<p>注：matlab中所有的表达式都需要写成&lt;=的形式再带入。</p><p>解决线性问题常用函数 linprog  用法</p><p><img src="a.png" alt=""></p><p><img src="b.png" alt=""></p><p><img src="c.png" alt=""></p><p><img src="d.png" alt=""></p><p>结果</p><p><img src="e.png" alt=""></p><p>matlab一维差值 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注：matlab中所有的表达式都需要写成&amp;lt;=的形式再带入。&lt;/p&gt;
&lt;p&gt;解决线性问题常用函数 linprog  用法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;a.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;b.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数学建模</title>
    <link href="http://yoursite.com/2018/08/24/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    <id>http://yoursite.com/2018/08/24/数学建模/</id>
    <published>2018-08-24T02:32:25.000Z</published>
    <updated>2018-08-24T10:28:06.616Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：写论文做了什么事情，采用何种方法，解决了什么问题，得到了什么结果。问题1,2,3分开写。忌讳：1.背景说了一大堆。2.用matlab什么函数balabala！</p><p>问题重述：不能简单抄问题。把原来的问题，用自己的话描述，话语倾向于用何种方法解决，有侧重。一定要有！</p><p>做两件事情：1.构建数学模型。2.拟合。</p><p>最小二乘法：处理大批量离散的数据。</p><p>插值：经过所有的数据点，少量数据适用。低次、多元函数。</p><p>拟合：大量数据适用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要：写论文做了什么事情，采用何种方法，解决了什么问题，得到了什么结果。问题1,2,3分开写。忌讳：1.背景说了一大堆。2.用matlab什么函数balabala！&lt;/p&gt;
&lt;p&gt;问题重述：不能简单抄问题。把原来的问题，用自己的话描述，话语倾向于用何种方法解决，有侧重。一定
      
    
    </summary>
    
    
      <category term="数学建模" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>程序静态连接、动态链接</title>
    <link href="http://yoursite.com/2018/08/23/%E7%A8%8B%E5%BA%8F%E9%9D%99%E6%80%81%E8%BF%9E%E6%8E%A5%E3%80%81%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2018/08/23/程序静态连接、动态链接/</id>
    <published>2018-08-23T10:22:09.000Z</published>
    <updated>2018-08-23T11:59:21.161Z</updated>
    
    <content type="html"><![CDATA[<p>源代码到可执行文件过程：预编译（生成.i。处理源代码中以#开始的u、预编译指令，展开宏定义，删注释，递归包含头文件，加行号和文件名标识。详见P39），编译（生成.s。将预编译文件进行词法、语法、语义分析，优化生成汇编代码），汇编（生成.o。将汇编代码转换成机器可执行指令），链接（多个不同的目标文件之间相互粘到一起）。</p><p>静态链接：</p><p>所有的程序模块都链接成一个单独的可执行文件。由链接器在链接时将库的内容加入到可执行程序中的做法。浪费空间。是程序用一个链接一个，不知道共享的那种。发布时也会引入不同版本的操作系统需编写不同的链接程序。</p><p>动态链接：</p><p>程序的模块分隔成独立的文件，等程序要运行的时候才链接。链接过程推迟到运行时刻。有共享对象（linux：.so  windows：.dll）。延迟绑定。下面是例子</p><p>源代码如下，需要四个文件 Lib.c Lib.h Program1.c Program2.c</p><p><img src="a.png" alt=""></p><p><img src="b.png" alt=""></p><p>通过如下指令生成Lib.so共享对象</p><p><img src="c.png" alt=""></p><p>编译Program1.c和Program2.c</p><p><img src="d.png" alt=""></p><p>Program1的编译链接过程</p><p><img src="e.png" alt="编译和链接过程"></p><p>静态链接时，这一步会把Program1.o和Lib.o链接到一起，产生输出可执行文件Program1.</p><p>动态链接时，Lib.o没有链接进来，链接的输入目标文件只有Program1.o  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;源代码到可执行文件过程：预编译（生成.i。处理源代码中以#开始的u、预编译指令，展开宏定义，删注释，递归包含头文件，加行号和文件名标识。详见P39），编译（生成.s。将预编译文件进行词法、语法、语义分析，优化生成汇编代码），汇编（生成.o。将汇编代码转换成机器可执行指令），
      
    
    </summary>
    
    
      <category term="装载" scheme="http://yoursite.com/tags/%E8%A3%85%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>木木的日常</title>
    <link href="http://yoursite.com/2018/08/23/%E6%9C%A8%E6%9C%A8%E7%9A%84%E6%97%A5%E5%B8%B8/"/>
    <id>http://yoursite.com/2018/08/23/木木的日常/</id>
    <published>2018-08-23T08:25:16.000Z</published>
    <updated>2018-08-23T08:41:23.944Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚装系统，噗，不知怎么的，把centos装到U盘里面了，U盘插上就能打开，U盘关了就找不到centos了，只剩下孤零零的Ubuntu。但是还是上不了网。很无奈。</p><p>今早，折腾了一上午，无果，想想还是算了吧，把它拿到修电脑的地方去修好了。我也没办法了，谁叫自己这么菜呢。以后再说吧。</p><p>昨晚搞得3点过才睡，发现哭真的能发泄情绪诶，难过的时候哭出来，过一会儿就不难过了，早上眼睛还是肿肿的。嗨呀，就不要再想啦，好好爱自己，熬过这关就好了。想家，想妈妈。</p><p>还有好多事情还没做。大创，毛概，linux shell，学术研究书，程序员的自我修养。这些都是暑假应该完成的东西，我一样都没有完成。但是，事情总是慢慢来的嘛，一件一件地把事情做好，就好啦！</p><p>木木真傻，傻傻的才会更开心，嗯，那就继续傻下去吧。</p><p>好了，我要开始写毛概了，大创的话，任务布置下来再说吧。</p><p>事情，要一件一件的去完成！</p><p><img src="a.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨晚装系统，噗，不知怎么的，把centos装到U盘里面了，U盘插上就能打开，U盘关了就找不到centos了，只剩下孤零零的Ubuntu。但是还是上不了网。很无奈。&lt;/p&gt;
&lt;p&gt;今早，折腾了一上午，无果，想想还是算了吧，把它拿到修电脑的地方去修好了。我也没办法了，谁叫自己这
      
    
    </summary>
    
    
      <category term="日常" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Longest Palindromic Substring题解</title>
    <link href="http://yoursite.com/2018/08/22/LeetCode-Longest-Palindromic-Substring%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/22/LeetCode-Longest-Palindromic-Substring题解/</id>
    <published>2018-08-22T12:04:12.000Z</published>
    <updated>2018-08-22T12:13:09.369Z</updated>
    
    <content type="html"><![CDATA[<p>思考这个问题，最初的想法是把所有的解都尝试一遍，然后找出最长的回文字符串，于是，我就用了递归，跑了一遍最初的实例，跑通了，然后很开心的去提交。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SolutionLongestPalindromicSubstring</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindromic</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length=s.length();</span><br><span class="line">        <span class="keyword">int</span> pl=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pr=length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pl&lt;pr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.at(pl)!=s.at(pr))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pl++;</span><br><span class="line">            pr--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length=s.length();</span><br><span class="line">        <span class="keyword">int</span> pl=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pr=length;</span><br><span class="line">        <span class="keyword">if</span> (pr&gt;=pl&amp;&amp;isPalindromic(s.substr(pl,(pr-pl))))&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> currpl=pl;</span><br><span class="line">        <span class="keyword">int</span> currpr=pr;</span><br><span class="line">        <span class="built_in">string</span> max=<span class="string">""</span>;</span><br><span class="line">        <span class="built_in">string</span> temp=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>((++currpl)&lt;=pr)&#123;</span><br><span class="line">            temp=max=longestPalindrome(s.substr(currpl,currpr-currpl));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp.length()&gt;max.length())</span><br><span class="line">            max=temp;</span><br><span class="line">        currpl=pl;</span><br><span class="line">        currpr=pr;</span><br><span class="line">        <span class="keyword">if</span>((--currpr)&gt;=currpl)&#123;</span><br><span class="line">            temp=longestPalindrome(s.substr(currpl,currpr-currpl));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp.length()&gt;max.length())</span><br><span class="line">            max=temp;</span><br><span class="line">        currpl=pl+<span class="number">1</span>;</span><br><span class="line">        currpr=pr<span class="number">-1</span>;</span><br><span class="line">        temp=longestPalindrome(s.substr(currpl,currpr-currpl));</span><br><span class="line">        <span class="keyword">if</span>(temp.length()&gt;max.length())</span><br><span class="line">            max=temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结果，哦吼，超时了。</p><p>是啊，递归的复杂度太高了，然后，如果是我，肯定是从大的开始找啊。</p><p>顺着这个思路，再加上子串肯定是连续的，这么一想，然后就自动的去捆绑子串。</p><p>首先捆绑的子串的长度就是原串本身，如果是回文，则最长的子串就找到啦。</p><p>如果捆绑串不是回文，则捆绑的长度-1，再从左往右移动，依次检验当前捆绑串是否是回文子串</p><p>重复上诉步骤，肯定能找到回文串，毕竟一个字符也是回文子串嘛</p><p>贴代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SolutionLongestPalindromicSubstring</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindromic</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length=s.length();</span><br><span class="line">        <span class="keyword">int</span> pl=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pr=length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pl&lt;pr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.at(pl)!=s.at(pr))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pl++;</span><br><span class="line">            pr--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isPalindromic(s))</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxLength=s.length()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> length=s.length();</span><br><span class="line">        <span class="keyword">int</span> pl=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (maxLength&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (pl+maxLength&lt;=length)&#123;</span><br><span class="line">                <span class="keyword">if</span>(isPalindromic(s.substr(pl,maxLength)))&#123;</span><br><span class="line">                    <span class="keyword">return</span> s.substr(pl,maxLength);</span><br><span class="line">                &#125;</span><br><span class="line">                pl++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxLength--;</span><br><span class="line">            pl=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substr(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码地址:</p><p><a href="https://github.com/DuWenLi-mumu/LeetCodeSolution/blob/master/Longest%20Palindromic%20Substring.cpp" target="_blank" rel="noopener">https://github.com/DuWenLi-mumu/LeetCodeSolution/blob/master/Longest%20Palindromic%20Substring.cpp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;思考这个问题，最初的想法是把所有的解都尝试一遍，然后找出最长的回文字符串，于是，我就用了递归，跑了一遍最初的实例，跑通了，然后很开心的去提交。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>木木的日常--注册账号</title>
    <link href="http://yoursite.com/2018/08/22/%E6%9C%A8%E6%9C%A8%E7%9A%84%E6%97%A5%E5%B8%B8-%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7/"/>
    <id>http://yoursite.com/2018/08/22/木木的日常-注册账号/</id>
    <published>2018-08-22T09:34:16.000Z</published>
    <updated>2018-08-22T12:01:45.211Z</updated>
    
    <content type="html"><![CDATA[<p>昨天，浏览了一下Tuts 4 You 也就是这个网站 <a href="https://tuts4you.com/" target="_blank" rel="noopener">https://tuts4you.com/</a><br>虽然不怎么看得懂，但发现里面好像有很多资源可以下载，于是就想，那就注册个账号嘛，多简单的事情！<br>然后，就开始了我的注册账号之旅，这可以说是我最难的一次注册账号的经历！<br>填好了基本信息，然后发现了一个搞笑的问题<br><img src="/2018/08/22/木木的日常-注册账号/a.jpg" title="figure1"><br>额，好吧，白活二十年！<br>接下来，下面这个问题，直接蒙了<br><img src="/2018/08/22/木木的日常-注册账号/b.jpg" title="figure2"><br>这是啥玩意儿，搜索了一下，原来是八进制的字符串匹配，噗，本来还想一个一个手工匹配，刚刚开始就放弃了。。。<br>算了，还是写个程序吧，，，<br>然后就开始了疯狂的复制粘贴匹配段之旅<br><img src="/2018/08/22/木木的日常-注册账号/c.jpg" title="figure3"><br>最后这段是什么意思呢？？？<br>程序运行出来是这样的<br><img src="/2018/08/22/木木的日常-注册账号/d.jpg" title="figure4"><br>噗 我TM还是不知道是什么意思，还是选择继续百度<br>百度结果如下，无果，切换成google<br><img src="/2018/08/22/木木的日常-注册账号/e.jpg" title="figure5"><br>google果然更好用，找到答案了<br><img src="/2018/08/22/木木的日常-注册账号/f.jpg" title="figure6"><br>噗，赶紧填进去，，，终于<br>注册成功了<br>其实中间还有选择下列图片中哪些是车，哪些是路，选错重来。<br>噗，直接崩溃，还好TM是写的程序，不然，，，，凭借我的耐心，我是别想注册账号了<br>登陆看看<br><img src="/2018/08/22/木木的日常-注册账号/g.jpg" title="figure7"></p><p>以后会经常浏览这个网站，这可是我花了一个多小时才注册的账号啊！！！！嘤嘤嘤！！！<br>代码地址:</p><p><a href="https://github.com/DuWenLi-mumu/CPlusPlusLearn/blob/master/decode8system.cpp" target="_blank" rel="noopener">https://github.com/DuWenLi-mumu/CPlusPlusLearn/blob/master/decode8system.cpp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天，浏览了一下Tuts 4 You 也就是这个网站 &lt;a href=&quot;https://tuts4you.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tuts4you.com/&lt;/a&gt;&lt;br&gt;虽然不怎么看得懂，但发现里面好像有很
      
    
    </summary>
    
    
      <category term="木木的日常" scheme="http://yoursite.com/tags/%E6%9C%A8%E6%9C%A8%E7%9A%84%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>my-first-blog</title>
    <link href="http://yoursite.com/2018/08/19/my-first-blog/"/>
    <id>http://yoursite.com/2018/08/19/my-first-blog/</id>
    <published>2018-08-19T11:23:23.000Z</published>
    <updated>2018-08-22T08:14:09.220Z</updated>
    
    <content type="html"><![CDATA[<p>木木的第一篇博客<br>额。。。。怎么说呢，欢迎来到木木的小屋！<br>哈哈哈！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;木木的第一篇博客&lt;br&gt;额。。。。怎么说呢，欢迎来到木木的小屋！&lt;br&gt;哈哈哈！&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="just for fun" scheme="http://yoursite.com/tags/just-for-fun/"/>
    
  </entry>
  
</feed>
